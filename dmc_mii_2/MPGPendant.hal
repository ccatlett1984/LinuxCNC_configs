# Jog Pendant
loadrt encoder num_chan=1
loadrt mux4 count=1
addf encoder.capture-position servo-thread
addf encoder.update-counters servo-thread
addf mux4.0 servo-thread

# If your MPG outputs a quadrature signal per click set x4 to 1
# If your MPG puts out 1 pulse per click set x4 to 0
setp encoder.0.x4-mode 1

# For velocity mode, set to 1
# In velocity mode the axis stops when the dial is stopped
# even if that means the commanded motion is not completed,
# For position mode (the default), set to 0
# In position mode the axis will move exactly jog-scale
# units for each count, regardless of how long that might take,
setp axis.x.jog-vel-mode 0
setp axis.z.jog-vel-mode 0

# This sets the scale that will be used based on the input to the mux4
setp mux4.0.in0 0.1
setp mux4.0.in1 0.01
setp mux4.0.in2 0.001

# The inputs to the mux4 component
# Set the selected scale according to the synopsis of mux4
# .sel0 -> false and .sel1 -> false selected value mux4.in.0
# and so on
net scale0 mux4.0.sel0 <= hm2_7c80.0.inmux.00.input-05
net scale1 mux4.0.sel1 <= hm2_7c80.0.inmux.00.input-06

# The output from the mux4 is sent to each axis jog scale
net mpg-scale <= mux4.0.out
net mpg-scale => axis.x.jog-scale
net mpg-scale => axis.z.jog-scale

# The MPG inputs
net encoder-counts <= hm2_7c80.0.inmux.00.enc0-count

# The Axis select inputs
net mpg-x axis.x.jog-enable <= hm2_7c80.0.inmux.00.input-03
net mpg-z axis.z.jog-enable <= hm2_7c80.0.inmux.00.input-04


# The encoder output counts to the axis. Only the selected axis will move.
net encoder-counts => axis.x.jog-counts
net encoder-counts => axis.z.jog-counts

